Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-11-28T20:54:06+08:00

====== 管道原理 ======
Created Wednesday 28 November 2018

===== 简介 =====
* 管道是进程间通信的主要手段之一
* 一个管道实际上是个只存在于内存中的文件，对这个文件的操作要通过两个已经打开文件进行，它们分别代表管道的两端。
* 管道是一种特殊的文件，它不属于某一种文件系统，而是一种独立的文件系统，有其自己的数据结构。
* 根据管道的适用范围将其分为：无名管道和命名管道。

==== 无名管道 ====
主要用于父进程与子进程之间，或者两个兄弟进程之间。在 linux 系统中可以通过系统调用建立起一个单向的通信管道，且这种关系只能由父进程来建立。

==== 命名管道 ====
* 命名管道是建立在实际的磁盘介质或文件系统（而不是只存在于内存中）上有自己名字的文件，任何进程可以在任何时间通过文件名或路径名与该文件建立联系。
* 为了实现命名管道，引入了一种新的文件类型——FIFO 文件（先进先出），实现一个命名管道实际上就是实现一个 FIFO 文件。
* 命名管道一旦建立，之后它的读、写以及关闭操作都与普通管道完全相同。虽然 FIFO 文件的 inode 节点在磁盘上，但是文件的数据还是存在于内存缓冲页面中，和普通管道相同。

===== 实现机制 =====
* 管道是由内核管理的一个缓冲区。
* 管道的一端连接一个进程的输出，这个进程会向管道中放入信息。
* 管道的另一端连接一个进程的输入，这个进程取出被放入管道的信息。
* 一个缓冲区一般为 4K 大小，它被设计成为环形的数据结构，以便管道可以被循环利用。''(?)''
* 当管道中没有信息，从管道中读取的进程会等待，直到另一端的进程放入信息。
* 当管道被放满信息，尝试放入信息的进程会等待，直到另一端的进程取出信息。
* 当两个进程都终结的时候，管道也自动消失。

==== 创建过程 ====
{{./screenshot_2018-11-28-211641.png}}

===== 结构 =====
在 Linux 中，管道的实现并没有使用专门的数据结构，而是借助了文件系统的 file 结构和 VFS 的索引节点 inode。通过将两个 file 结构指向同一个临时的 VFS 索引节点，而这个 VFS 索引节点又指向一个物理页面而实现的。
{{./screenshot_2018-11-28-212543.png}}
