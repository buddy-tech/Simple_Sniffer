Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-11-26T09:12:04+08:00

====== GIL ======
Created Monday 26 November 2018

===== 什么是 GIL =====
GIL 是在实现 Python 解析器（CPython）时所引入的一个概念，全称 Global Interpreter Lock。GIL 并不是 Python 的特性，也不是所有解释器都有，比如 JPython 就没有。
官方解释：
	''In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython’s memory management is not thread-safe. (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.)''


===== 为何存在 =====
CPython 为了解决多线程之间数据完整性和状态同步， 于是加了 GIL 这把全局锁。而当越来越多的代码库开发者接受了这种设定后，他们开始大量依赖这种特性（即默认 python 内部对象是 thread-safe 的，无需在实现时考虑额外的内存锁和同步操作）。

===== 缺陷 =====
在并发执行计算密集型线程时严重影响性能，甚至不如串行执行。

伪代码：
'''
while True:
'''
	'''
	acquire GIL
	for i in 1000:
	'''
		'''
		do something
		'''
	'''
	release GIL
	/* Give Operating System a chance to do thread scheduling */
	'''

从伪代码可以看到，从 release GIL 到 acquire GIL 之间几乎是没有间隙的。所以当其他在其他核心上的线程被唤醒时，大部分情况下主线程已经又再一次获取到 GIL 了。这个时候被唤醒执行的线程只能白白的浪费 CPU 时间，看着另一个线程拿着 GIL 欢快的执行着。然后达到切换时间后进入待调度状态，再被唤醒，再等待，以此往复恶性循环。

原文：http://cenalulu.github.io/python/gil-in-python/
